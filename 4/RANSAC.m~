function [best_paramA, best_paramb, best_inlier_matrix, success_rates] = RANSAC(Ia,Ib,P,N)


[matched_a,matched_b] = keypoint_matching(Ia,Ib);

n_matches = size(matched_a,2);

% initialize matrix that stores the best inliers in columns as emtpy matrix
% -> (2, #best inliers) = size(inlier_matrix)
% it saves the coordinates of transformed points of image2
% that now lie in image1
best_inlier_matrix = [];
best_n_inliers= 0;
best_paramA= [];
best_paramb= [];

success_rates = []; %success rate after each iteration

for k = 1:N
    perm = randperm(n_matches) ;
    current_best_inlier_matrix = [];
    
    % Create A and b for computing the parameters later
    A = zeros(2*P, 6);
    b = zeros(2*P, 1);
    A_idx = 1;
    for i=perm(1:P)
        x1 = matched_a(1,i);
        y1 = matched_a(2,i);
        x2 = matched_b(1,i);
        y2 = matched_b(2,i);

        % here we concatenate the values of A and b for the different
        % randomly chosen subset of matching points.
        A(A_idx*2-1,:) = [x1 y1 0 0 1 0];
        A(A_idx*2,:) = [0 0 x1 y1 0 1];
        b(A_idx*2-1:A_idx*2) = [x2 y2];
        A_idx = A_idx + 1;
    end
    
    x1 = matched_a(1,i);
        y1 = matched_a(2,i);
        x2 = matched_b(1,i);
        y2 = matched_b(2,i);
    A = [x1' y1' zeros(size(x1')) zeros(size(x1')) ones(size(x1')) zeros(size(x1')); 
        zeros(size(x1')) zeros(size(x1')) x1' y1' zeros(size(x1')) ones(size(x1'))];
    % compute the parameter according to the formula in the exercise sheet.
    params = pinv(A)*b;

    n_inliers=0;
    
    % divide into A-parameter and b-parameter for better overview
    paramA = [params(1) params(2); params(3) params(4)];
    paramb = [params(5) ; params(6)];
    for j = 1:n_matches
        x1 = matched_a(1,j);
        y1 = matched_a(2,j);
        x2 = matched_b(1,j);
        y2 = matched_b(2,j);
        % transform all the points and see, which ones lie in a radius of
        % 10 pixels. These are then called 'inliers'
        deviation = paramA*[x1;y1] + paramb - [x2;y2];
        if norm(deviation)<=10
            n_inliers=n_inliers+1;
            current_best_inlier_matrix = [current_best_inlier_matrix.'; paramA*[x1;y1] + paramb].';
        end
    end
    
    % Now if we have more inliers (aka better transformation approximation)
    % then before, we save all the data
    if n_inliers>best_n_inliers 
        best_n_inliers=n_inliers;
        best_paramA=paramA;
        best_paramb=paramb;
        best_inlier_matrix = current_best_inlier_matrix;
    end
    
    success_rates(k) = best_n_inliers/n_matches;
end





