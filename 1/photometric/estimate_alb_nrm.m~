function [ albedo, normal ] = estimate_alb_nrm( image_stack, scriptV, shadow_trick)
%COMPUTE_SURFACE_GRADIENT compute the gradient of the surface
%   image_stack : the images of the desired surface stacked up on the 3rd
%   dimension
%   scriptV : matrix V (in the algorithm) of source and camera information
%   shadow_trick: (true/false) whether or not to use shadow trick in solving
%   	linear equations
%   albedo : the surface albedo
%   normal : the surface normal

[h, w, ~] = size(image_stack)
if nargin == 2
    shadow_trick = true;
end

% create arrays for
%   albedo (1 channel)
%   normal (3 channels)
rs = zeros(h, w);
albedo = zeros(h, w);
normal = zeros(h, w, 3);

% =========================================================================
% YOUR CODE GOES HERE
% for each point in the image array
%   stack image values into a vector i
%   construct the diagonal matrix scriptI
%   solve scriptI * scriptV * g = scriptI * i to obtain g for this point
%   albedo at this point is |g|
%   normal at this point is g / |g|

for y = 1:h
  for x = 1:w 
    i = image_stack(y, x, :);
    i = i(:);
    scriptI = diag(i);
    IV = scriptI * scriptV;
    Ii = scriptI * i;
    % Use shadow trick
    [g, r] = linsolve(IV, Ii);
    %[g, r] = linsolve(scriptV, i);
    norm_g = norm(g);
    rs(y, x) = r;
    
    if norm_g == 0
      continue
    end
    albedo(y, x) = norm_g;
    if norm_g == 0
        %"!!!!!"
        normal(y, x, :) = g;
    else
        normal(y, x, :) = g / norm_g;
    end
  end
end
sum(sum(rs < 3))
"Rs == 3"
max(albedo(rs == 3.0))
min(albedo(rs == 3.0))
"Rs < 3"
max(albedo(rs < 3.0))
min(albedo(rs < 3.0))

% =========================================================================

end

